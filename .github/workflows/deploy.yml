name: Deploy

on:
  push:
    branches:
      - master

env:
  IMAGE_NAME: nsidnev/fastapi-realworld-example-app
  DOCKER_USER: ${{ secrets.DOCKER_USER }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  build:
    name: Build Container
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v1
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Install dependencies
        run: |
          pip install poetry
          poetry config settings.virtualenvs.create false
          poetry install --no-dev
      - name: Build image and publish to registry
        run: |
          docker build -t $IMAGE_NAME:latest .
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin
          docker push $IMAGE_NAME:latest

  deploy:
    name: Deploy
    runs-on: ubuntu-18.04
    needs: build
    steps:
      - uses: actions/checkout@master
      - name: Deploy service with traefik over ssh
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DB_CONNECTION: ${{ secrets.DB_CONNECTION }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )
          eval $(ssh-agent -s)
          echo "add ssh key"
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" $SSH_USER@$SSH_HOST "
            docker pull $IMAGE_NAME && \
            (docker rm -f frw_backend || true) && \
            docker run -d \
              --name frw_backend \
              --network web \
              --restart always \
              --label "traefik.enable=true" \
              --label "traefik.backend=frw-backend" \
              --label "traefik.frontend.rule=Host:frw.nsidnev.me" \
              -e DB_CONNECTION="$DB_CONNECTION" \
              -e SECRET_KEY="$SECRET_KEY" \
              $IMAGE_NAME"